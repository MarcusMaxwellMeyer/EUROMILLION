<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: #E9E9E9;
            margin: 0;
            padding: 0;
        }

        .container {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin: 30px;
        }

        .set-examples-container,
        .table-container,
        .historical-table-container {
            width: calc(33.33% - 10px);
            background-color: #f5f5f5;
            border-radius: 15px;
            overflow-y: auto;
            max-height: 510px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th,
        td {
            padding: 15px;
            text-align: center;
            font-size: 0.9em;
            border-bottom: 1px solid #ccc;
        }

        th {
            font-weight: bold;
            background-color: #f2f2f2;
            color: #0b1537;
        }

        h1 {
            font-size: 1.5em;
            margin: 0;
            padding: 20px 0;
            color: #0b1537;
            text-align: center;
        }

        .subheadings {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            align-items: center;
            margin-bottom: 20px;
        }

        .subheading-container {
            width: 100%;
            margin-bottom: 15px;
        }

        h2 {
            font-size: 1em;
            margin: 0;
            padding-bottom: 15px;
            color: #0b1537;
            text-align: center;
        }

        select {
            width: 100%;
            padding: 8px;
            margin-top: 8px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #fff;
            font-size: 0.9em;
            cursor: pointer;
            color: #0b1537;
        }

        #generateButton {
            width: 100%;
            font-size: 1em;
            padding: 12px 0;
            cursor: pointer;
            background-color: gray;
            color: #fff;
            border: none;
            border-radius: 5px;
            transition: background-color .3s ease;
        }

        #generateButton:hover {
            background-color: #1a3a4f;
        }

        #numberDisplay {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 20px;
        }

        .number-ball {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #ffff13;
            color: black;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 5px;
            font-weight: bold;
            font-size: 0.8em;
        }

        .historical-actions {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
        }

        .copy-all-button,
        .clear-all-button {
            padding: 10px 20px;
            margin: 5px;
            background-color: gray;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color .3s ease;
        }

        .copy-all-button:hover,
        .clear-all-button:hover {
            background-color: #1a3a4f;
        }

        .set-examples-table td:hover {
            filter: brightness(90%);
            transition: filter 0.3s ease;
            cursor: pointer;
        }

        @media only screen and (max-width: 768px) {
            .container {
                flex-direction: column;
            }

            .set-examples-container,
            .table-container,
            .historical-table-container {
                width: 90vw;
                max-height: 47vh;
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="set-examples-container">
            <table class="set-examples-table">
                <thead>
                    <tr>
                        <th>Set Examples</th>
                    </tr>
                </thead>
                <tbody id="setExamples">
                    <tr><td onclick="populateDropdowns('2/3 | 2/3 | 1/4')">2/3 | 2/3 | 1/4</td></tr>
                    <tr><td onclick="populateDropdowns('3/3 | 1/4 | 1/4')">3/3 | 1/4 | 1/4</td></tr>
                    <tr><td onclick="populateDropdowns('3/2 | 3/2 | 0/5')">3/2 | 3/2 | 0/5</td></tr>
                    <tr><td onclick="populateDropdowns('4/1 | 1/4 | 2/3')">4/1 | 1/4 | 2/3</td></tr>
                    <tr><td onclick="populateDropdowns('1/4 | 3/3 | 1/4')">1/4 | 3/3 | 1/4</td></tr>
                    <tr><td onclick="populateDropdowns('0/5 | 3/2 | 2/3')">0/5 | 3/2 | 2/3</td></tr>
                    <tr><td onclick="populateDropdowns('5/0 | 2/3 | 2/3')">5/0 | 2/3 | 2/3</td></tr>
                    <tr><td onclick="populateDropdowns('5/0 | 2/3 | 2/3')">5/0 | 2/3 | 2/3</td></tr>
                    <tr><td onclick="populateDropdowns('4/1 | 1/4 | 2/3')">4/1 | 1/4 | 2/3</td></tr>
                </tbody>
            </table>
        </div>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th colspan="2">
                            <h1>EUROMILLIONS GO!</h1>
                            <div class="subheadings">
                                <div class="subheading-container">
                                    <h2>Rows &amp; Columns</h2>
                                    <select id="rcDropdown" onchange="checkDropdowns()">
                                        <option value=""></option>  
                                        <option value="2/3">2/3</option>
                                        <option value="3/2">3/2</option>
                                        <option value="3/3">3/3</option>
                                        <option value="4/1">4/1</option>
                                        <option value="1/4">1/4</option>
                                        <option value="5/0">5/0</option>
                                        <option value="0/5">0/5</option>
                                    </select>
                                </div>
                                <div class="subheading-container">
                                    <h2>Odds &amp; Evens</h2>
                                    <select id="oeDropdown" onchange="checkDropdowns()">
                                        <option value=""></option>
                                        <option value="3/2">3/2</option>
                                        <option value="2/3">2/3</option>
                                        <option value="1/4">1/4</option>
                                        <option value="4/1">4/1</option>
                                        <option value="5/0">5/0</option>
                                        <option value="0/5">0/5</option>
                                    </select>
                                </div>
                                <div class="subheading-container">
                                    <h2>Lows &amp; Highs</h2>
                                    <select id="lhDropdown" onchange="checkDropdowns()">
                                        <option value=""></option>
                                        <option value="3/2">3/2</option>
                                        <option value="2/3">2/3</option>
                                        <option value="1/4">1/4</option>
                                        <option value="4/1">4/1</option>
                                        <option value="5/0">5/0</option>
                                        <option value="0/5">0/5</option>
                                    </select>
                                </div>
                            </div>
                            <button id="generateButton" onclick="generateNumbers()">Generate</button>
                            <div id="numberDisplay"></div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr id="numberTableBody"></tr>
                </tbody>
            </table>
        </div>
        <div class="historical-table-container">
            <table class="historical-table">
                <thead>
                    <tr>
                        <th>Generated Numbers</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="historicalNumbers"></tbody>
            </table>
            <div class="historical-actions">
                <button class="copy-all-button" onclick="copyAllNumbers()">Copy All</button>
                <button class="clear-all-button" onclick="clearAllNumbers()">Clear All</button>
            </div>
        </div>
    </div>

    <script>
        window.addEventListener('DOMContentLoaded', () => {
            const tableRows = document.querySelectorAll('.set-examples-table tbody tr');
            const colors = ['#ffcccc', '#ffe0cc', '#ffeedd', '#fff5ee', '#e6ffe6']; // Gradient colors
            const maxFrequency = tableRows.length;
            
            tableRows.forEach((row, index) => {
                const td = row.querySelector('td');
                const frequency = maxFrequency - index;
                const colorIndex = Math.floor((frequency - 1) / (maxFrequency / colors.length));
                td.style.backgroundColor = colors[colorIndex];
            });
        });

        function populateDropdowns(setExample) {
            const [rowsCols, oddsEvens, lowsHighs] = setExample.split(' | ');
            const [rows, cols] = rowsCols.split('/').map(val => val.trim());
            const [odds, evens] = oddsEvens.split('/').map(val => val.trim());
            const [lows, highs] = lowsHighs.split('/').map(val => val.trim());

            const rcDropdown = document.getElementById('rcDropdown');
            const oeDropdown = document.getElementById('oeDropdown');
            const lhDropdown = document.getElementById('lhDropdown');

            rcDropdown.value = `${rows}/${cols}`;
            oeDropdown.value = `${odds}/${evens}`;
            lhDropdown.value = `${lows}/${highs}`;
        }

        function checkDropdowns() {
            const rcDp = document.getElementById('rcDropdown');
            const oeDp = document.getElementById('oeDropdown');
            const lhDp = document.getElementById('lhDropdown');
            const generateButton = document.getElementById('generateButton');
            const displayArea = document.getElementById('numberDisplay');

            displayArea.innerHTML = '';

            if (rcDp.value !== '' && oeDp.value !== '' && lhDp.value !== '') {
                generateButton.disabled = false;
            } else {
                generateButton.disabled = true;
            }
        }

        function generateNumbers() {
            const rcDp = document.getElementById('rcDropdown');
            const oeDp = document.getElementById('oeDropdown');
            const lhDp = document.getElementById('lhDropdown');

            const oeValue = oeDp.options[oeDp.selectedIndex].value;
            const lhValue = lhDp.options[lhDp.selectedIndex].value;

            const [odds, evens] = oeValue.split('/').map(Number);
            const [lows, highs] = lhValue.split('/').map(Number);

            const numbersArr = Array.from({ length: 50 }, (_, i) => i + 1);
            const gridSize = Math.ceil(Math.sqrt(numbersArr.length));
            const rows = Array.from({ length: gridSize }, () => []);

            numbersArr.forEach((num, index) => {
                const rowIndex = Math.floor(index / gridSize);
                rows[rowIndex].push(num);
            });

            function checkCriteria(nums) {
                const isUnique = new Set(nums).size === nums.length;
                const evenCount = nums.filter(n => n % 2 === 0).length;
                const oddCount = nums.filter(n => n % 2 !== 0).length;
                const lowCount = nums.filter(n => n <= 25).length;
                const highCount = nums.filter(n => n > 25).length;

                return isUnique && evenCount === evens && oddCount === odds &&
                    lowCount === lows && highCount === highs;
            }

            let attempts = 0;
            while (attempts < 2E6) {
                attempts++;
                const selectedNumbers = Array.from({ length: 5 }, () => numbersArr[Math.floor(Math.random() * numbersArr.length)]);
                if (checkCriteria(selectedNumbers)) {
                    displayNumbers(selectedNumbers);
                    addHistoricalNumbers(selectedNumbers);
                    break;
                }
            }

            if (attempts >= 2E6) {
                displayNumbers(["N/A"]);
            }
        }

        function displayNumbers(numbers) {
            const displayArea = document.getElementById('numberDisplay');
            displayArea.innerHTML = '';

            if (numbers.includes("N/A")) {
                displayArea.textContent = 'Could not generate numbers';
            } else {
                numbers.forEach(num => {
                    const ball = document.createElement('div');
                    ball.classList.add('number-ball');
                    ball.textContent = num;
                    displayArea.appendChild(ball);
                });
            }
        }

        function addHistoricalNumbers(numbers) {
            const historicalNumbers = document.getElementById('historicalNumbers');
            const newRow = document.createElement('tr');
            const numbersCell = document.createElement('td');
            const actionsCell = document.createElement('td');
            const copyButton = document.createElement('button');
            const deleteButton = document.createElement('button');

            numbersCell.textContent = numbers.join(', ');
            copyButton.textContent = 'Copy';
            copyButton.classList.add('copy-button');
            copyButton.onclick = () => copyNumbers(numbers);
            deleteButton.textContent = 'Delete';
            deleteButton.classList.add('delete-button');
            deleteButton.onclick = () => deleteNumbersRow(newRow);

            actionsCell.appendChild(copyButton);
            actionsCell.appendChild(deleteButton);

            newRow.appendChild(numbersCell);
            newRow.appendChild(actionsCell);

            historicalNumbers.appendChild(newRow);
        }

        function copyNumbers(numbers) {
            const textarea = document.createElement('textarea');
            textarea.value = numbers.join('\n');
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
        }

        function deleteNumbersRow(row) {
            row.remove();
        }

        function copyAllNumbers() {
            const historicalNumbers = document.getElementById('historicalNumbers');
            const numbersArray = Array.from(historicalNumbers.querySelectorAll('tr td:first-child')).map(cell => cell.textContent.trim()).join('\n');
            copyNumbers(numbersArray.split('\n'));
        }

        function clearAllNumbers() {
            const historicalNumbers = document.getElementById('historicalNumbers');
            historicalNumbers.innerHTML = '';
        }
    </script>
</body>
</html>
